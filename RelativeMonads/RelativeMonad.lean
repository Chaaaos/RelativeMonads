import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Comma.Presheaf.Basic
import Lean.Level
import Mathlib.CategoryTheory.Monad.Basic

open CategoryTheory


/- General definitions pertaining to relative monads. This should
   probably be the main part of this file, and the stuff above
   pertaining to syntax should go elsewhere. -/



section
  universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

  variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A]
  variable {E : Type u‚ÇÇ} [Category.{v‚ÇÇ} E]
  variable (J : A ‚•§ E)

  structure RelativeMonad where
    map : A ‚Üí E
    Œ∑ (X) : J.obj X ‚ü∂ map X
    lift {X Y} (f : (J.obj X) ‚ü∂ (map Y)) :
      (map X) ‚ü∂ (map Y)
    unit_right : ‚àÄ (X : A), lift (Œ∑ X) = ùüô (map X)
    unit_left : forall {X Y : A} (f : (J.obj X) ‚ü∂ (map Y)),
      f =  Œ∑ X ‚â´ lift f
    comp_lift : forall {X Y Z : A}
      (f : (J.obj X) ‚ü∂ (map Y))
      (g : (J.obj Y) ‚ü∂ (map Z)),
      lift (f ‚â´ (lift g)) = (lift f) ‚â´ (lift g)
end

section
  universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ
  variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A]
  variable {E : Type u‚ÇÇ} [Category.{v‚ÇÇ} E]
  variable (J : A ‚•§ E)
  variable (T T' : RelativeMonad J)

/-- Tentative definition for relative monad morphisms
  (where both monads have the same root J)-/
  structure RelMonHom where
    map_hom {X : A} : (T.map X) ‚ü∂ (T'.map X)
    hom_unit {X : A} : (T.Œ∑ X) ‚â´ map_hom = (T'.Œ∑ X)
    hom_lift {X Y} : ‚àÄ (f : (J.obj X)  ‚ü∂ (T.map Y)),
      (T.lift f) ‚â´ map_hom = map_hom (X := X) ‚â´ (T'.lift (f ‚â´ map_hom))
end

/- I sould add proofs that :
  - T can be equiupped with a functor structure
  - Œ∑ and lift are then natural transformations
-/
