import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Comma.Presheaf.Basic
import Lean.Level
import Mathlib.CategoryTheory.Monad.Basic
import HigherRankSyntax.RelativeMonads.RelativeMonad

open CategoryTheory

section
universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

  variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A]
  variable {E : Type u‚ÇÇ} [Category.{v‚ÇÇ} E]
  variable {J : A ‚•§ E}
  variable (T : RelativeMonad J)

  structure RelativeAlgebra where
    carrier : E
    struct : ‚àÄ {Œ∂ : A},
      (J.obj Œ∂ ‚ü∂ carrier) ‚Üí (T.map Œ∂ ‚ü∂ carrier)
    unit_law : ‚àÄ {Œ∂ : A} (f : J.obj Œ∂ ‚ü∂ carrier),
      f = (T.Œ∑ Œ∂)‚â´ (struct f)
    bind_law : ‚àÄ {Œ∂ Œæ: A}
      (k : J.obj Œ∂ ‚ü∂ T.map Œæ)
      (f : J.obj Œæ ‚ü∂ carrier),
      (T.lift k) ‚â´ (struct f) = struct (k ‚â´ (struct f))

  end


/- Relative alegbra morphisms and the resulting category.-/
section
universe u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

  variable {A : Type u‚ÇÅ} [Category.{v‚ÇÅ} A]
  variable {E : Type u‚ÇÇ} [Category.{v‚ÇÇ} E]
  variable {J : A ‚•§ E}
  variable {T : RelativeMonad J}


  structure RelativeAlgebraHom (X Y : RelativeAlgebra T) where
    carrier_map : X.carrier ‚ü∂ Y.carrier
    struct_commute : ‚àÄ {Œ∂ : A} (f : J.obj Œ∂ ‚ü∂ X.carrier),
      (X.struct f) ‚â´ carrier_map  = Y.struct (f ‚â´ carrier_map)

  /- Identity morphism for relative algebra. -/
  def RelativeAlgebraHomId (X : RelativeAlgebra T) :
    RelativeAlgebraHom X X where
    carrier_map := ùüô X.carrier
    struct_commute {Œ∂} f := by aesop_cat

  /- Composition of relative algebra morphisms. -/
  def RelativeAlgebraHomComp {X Y Z : RelativeAlgebra T}
    (Œ¶ : RelativeAlgebraHom X Y) (Œ® : RelativeAlgebraHom Y Z) :
    RelativeAlgebraHom X Z  where
    carrier_map := Œ¶.carrier_map ‚â´ Œ®.carrier_map
    struct_commute {Œ∂} f := by
      rw[<-Category.assoc, Œ¶.struct_commute, Œ®.struct_commute, Category.assoc]

 /- Category of relative algebras. -/
  instance RelativeAlgebraCategory : Category (RelativeAlgebra T) where
    Hom := RelativeAlgebraHom
    id X := RelativeAlgebraHomId X
    comp Œ¶ Œ® := RelativeAlgebraHomComp Œ¶ Œ®
    id_comp {X Y} Œ® := by
      simp
      unfold RelativeAlgebraHomComp
      congr
      unfold RelativeAlgebraHomId
      simp
    comp_id {X Y} Œ¶ := by
      simp
      unfold RelativeAlgebraHomComp
      congr
      unfold RelativeAlgebraHomId
      simp
    assoc {X Y Z W} Œ¶ Œ® Œû := by
      simp
      unfold RelativeAlgebraHomComp
      simp
end

/- Add proofs that :
  - œá is natural
  - We can define an identity map for relative algebras
  - We can define composition for these maps
  - We can form a category with these algebras and morphisms

-/
